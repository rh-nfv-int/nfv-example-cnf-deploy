---
- name: Set local fact for trex pod networks
  set_fact:
    networks_trex: []
    packet_gen_net: "{{ packet_generator_networks if enable_lb|bool else cnf_app_networks }}"
    trex_app_run_passed: false

- name: Create network list for trex with hardcoded macs
  set_fact:
    networks_trex: "{{ networks_trex + [ item | combine({ 'mac': trex_mac_list[idx:idx+item.count] }) ] }}"
  loop: "{{ packet_gen_net }}"
  loop_control:
    index_var: idx

- name: Create CR for trex server
  k8s:
    definition: "{{ lookup('template', 'trex-server-cr.yaml.j2') }}"

- name: Check TRex pod status to be running
  k8s_info:
    namespace: "{{ cnf_namespace }}"
    kind: Pod
    label_selectors:
      - example-cnf-type=pkt-gen
  register: trex_result
  vars:
    container_state_running_query: "resources[0].status.containerStatuses[?name=='trex-server'].state.running"
    container_started_query: "resources[0].status.containerStatuses[?name=='trex-server'].started"
    container_ready_query: "resources[0].status.containerStatuses[?name=='trex-server'].ready"
    container_state_running: "{{ trex_result | json_query(container_state_running_query) }}"
    container_started: "{{ trex_result | json_query(container_started_query) }}"
    container_ready: "{{ trex_result | json_query(container_ready_query) }}"
  retries: 60
  delay: 5
  until:
    - trex_result.resources | length == 1
    - trex_result.resources[0].status.phase == 'Running'
    - container_state_running | length > 0
    - container_started | length > 0
    - container_started[0] | bool
    - container_ready | length > 0
    - container_ready[0] | bool

- name: Set TRex run status if the previous step passed
  set_fact:
    trex_app_run_passed: true
  when: trex_result.resources | length > 0

- name: Wait 2 minutes to have all resources ready for the TRex app test
  pause:
    seconds: 120

- name: TRexApp block
  block:
    - name: Set TRex app duration
      set_fact:
        duration: "{{ trex_duration | default(120) }}"

    - name: Create CR for TRex app
      k8s:
        definition: "{{ lookup('template', 'trex-app-cr.yaml.j2') }}"
      vars:
        packet_rate: 10kpps
        packet_size: 64

    - name: Wait for TRex app CR to be created
      shell: |
        {{ oc_tool_path }} get trexapp.examplecnf.openshift.io -o yaml -n {{ cnf_namespace }} {{ trex_app_cr_name }}
      register: trex_app_cr_installation
      retries: 30
      delay: 10
      until:
        - "'True' in trex_app_cr_installation.stdout"
        - "'Running' in trex_app_cr_installation.stdout"
        - "'Successful' in trex_app_cr_installation.stdout"

    - name: Wait for the TRex app TestStarted event
      k8s_info:
        namespace: "{{ cnf_namespace }}"
        kind: Event
        field_selectors:
          - "reason==TestStarted"
          - "involvedObject.name={{ trex_app_cr_name }}"
      register: trex_event
      retries: "{{ (duration|int/2)|round|int }}"
      delay: 5
      until: trex_event.resources | length > 0

    - name: Wait for the TRex app TestCompleted event
      k8s_info:
        namespace: "{{ cnf_namespace }}"
        kind: Event
        field_selectors:
          - "reason==TestCompleted"
          - "involvedObject.name={{ trex_app_cr_name }}"
      register: trex_event
      retries: "{{ (duration|int/2)|round|int }}"
      delay: 5
      until: trex_event.resources|length > 0

    - name: Wait for the TRex app TestPassed or TestFailed event
      k8s_info:
        namespace: "{{ cnf_namespace }}"
        kind: Event
        field_selectors: "involvedObject.name={{ trex_app_cr_name }}"
      register: trex_result
      retries: 5
      delay: 5
      until: "trex_result.resources | selectattr('reason', 'in', ['TestPassed', 'TestFailed']) | list | length > 0"

    - name: Fail if TestFailed event is present
      fail:
        msg: "TestFailed event detected"
      when: "'TestFailed' in trex_result.resources | map(attribute='reason') | list"

    - name: Wait for the TRex app PacketMatched event
      k8s_info:
        namespace: "{{ cnf_namespace }}"
        kind: Event
        field_selectors:
          - "reason==PacketMatched"
          - "involvedObject.name={{ trex_app_cr_name }}"
      register: trex_result
      retries: "{{ (duration|int/2)|round|int }}"
      delay: 5
      until: "trex_result.resources | length > 0"

    - name: Set TRex run status if passed
      set_fact:
        trex_app_run_passed: true
      when: trex_result.resources | length > 0
  when: enable_trex_app | bool
...
