---
# NetworkAttachmentDefintions should be created on the namespace, it
# will be created by sriov operator, when SriovNetwork resource is created
- name: check for net-attach-def presence in the namespace
  k8s_info:
    api_version: k8s.cni.cncf.io/v1
    kind: NetworkAttachmentDefinition
    namespace: "{{ cnf_namespace }}"
  register: net_list
  until: net_list.resources | length > 0
  retries: 9
  delay: 10

- name: Get the clusterversion info
  k8s_info:
    kind: ClusterVersion
  register: cluster_version

- name: Fail ClusterVersion when is not available
  fail:
    msg: "ClusterVersion object version is not available"
  when: cluster_version.resources[0].spec.channel|length == 0

- name: Parse the major and minor version from channel
  set_fact:
    ocp_version: "{{ cluster_version.resources[0].spec.channel.split('-')[1] }}"
    ocp_major: "{{ cluster_version.resources[0].spec.channel.split('-')[1].split('.')[0] }}"
    ocp_minor: "{{ cluster_version.resources[0].spec.channel.split('-')[1].split('.')[1] }}"

- name: get all nodes
  k8s_info:
    kind: Node
  register: nodes
  no_log: true

- name: Fail when the minimum workers are not met
  fail:
    msg: "Minimum 2 worker nodes are required to run example-cnf applications"
  when: "nodes.resources|length < 2"

- name: Fail when packet generator network is not available
  fail:
    msg: "'packet_generator_networks' is required when deployed with LB"
  when:
    - "enable_lb|bool"
    - "packet_generator_networks|length == 0"

- name: Fail when cnf app networks is not available
  fail:
    msg: "'cnf_app_networks' is required"
  when:
    - "cnf_app_networks|length == 0"

- name: set facts of modifying networks
  set_fact:
    pack_nw: []
    cnf_nw: []
  when: enable_lb|bool

- name: create packet gen network list for lb with hardcoded macs
  set_fact:
    pack_nw: "{{ pack_nw + [ item | combine({ 'mac': lb_gen_port_mac_list[idx:idx+item.count] }) ] }}"
  loop: "{{ packet_generator_networks }}"
  loop_control:
    index_var: idx
  when: enable_lb|bool

- name: create cnf app network list for lb with hardcoded macs
  set_fact:
    cnf_nw: "{{ cnf_nw + [ item | combine({ 'mac': lb_cnf_port_mac_list[idx:idx+item.count] }) ] }}"
  loop: "{{ cnf_app_networks }}"
  loop_control:
    index_var: idx
  when: enable_lb|bool

- name: include lb tasks
  include_tasks: lb-app.yaml
  when: enable_lb|bool

- name: create cr for cnf application
  k8s:
    definition: "{{ lookup('template', 'testpmd-cr.yaml.j2') }}"

- name: check testpmd pod count to be greater than 1
  k8s_info:
    namespace: "{{ cnf_namespace }}"
    kind: Pod
    label_selectors:
      - example-cnf-type=cnf-app
  register: testpmd_pods
  retries: 60
  delay: 5
  until:
    - testpmd_pods.resources|length >= 1

- name: check testpmd pod status to be running
  k8s_info:
    namespace: "{{ cnf_namespace }}"
    kind: Pod
    label_selectors:
      - example-cnf-type=cnf-app
  register: testpmd_pods
  retries: 60
  delay: 5
  until:
    - testpmd_pods.resources[0].status.phase == 'Running'

- name: check cnfappmac resource (created by testpmd app)
  k8s_info:
    namespace: "{{ cnf_namespace }}"
    kind: CNFAppMac
  register: mac
  retries: 120
  delay: 5
  until:
    - mac.resources is defined
    - mac.resources|length > 0

- name: trex cr block
  include_tasks: retry-trex.yaml
  when: enable_trex|bool

- name: trex additional tests
  include_tasks: trex/tests.yaml
  when:
    - enable_trex_app|bool
    - trex_test_config|length > 0
